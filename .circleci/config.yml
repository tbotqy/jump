version: 2.1

anchors:
  # for backend
  restore_backend_cache: &restore_backend_cache
    # Download and cache dependencies
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
  install_backend_dependencies: &install_backend_dependencies
    - run:
        name: install dependencies
        command: |
          bundle check --path vendor/bundle || bundle install --jobs=4 --retry=3 --path vendor/bundle
  save_backend_cache: &save_backend_cache
    - save_cache:
        paths:
          - vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}

  # for frontend
  frontend_docker_env: &frontend_docker_env
    - image: circleci/node:latest
      environment:
        TZ: Asia/Tokyo
  restore_frontend_cache: &restore_frontend_cache
    - restore_cache:
        keys:
          - v1-dependencies-{{ checksum "frontend/yarn.lock" }}
          - v1-dependencies-
  install_frontend_dependencies: &install_frontend_dependencies
    - run:
        working_directory: "frontend"
        command: yarn install
  save_frontend_cache: &save_frontend_cache
    - save_cache:
        paths:
          - frontend/node_modules
        key: v1-dependencies-{{ checksum "frontend/yarn.lock" }}

jobs:
  # for backend
  lint_backend:
    docker:
      - image: circleci/ruby:3.0.0
    steps:
      - checkout
      - <<: *restore_backend_cache
      - <<: *install_backend_dependencies
      - <<: *save_backend_cache
      - run: bundle exec rubocop

  build_backend:
    docker:
      - image: circleci/ruby:3.0.0
      - image: circleci/mysql:5.7
      - image: circleci/redis:4
    steps:
      - checkout
      - <<: *restore_backend_cache
      - <<: *install_backend_dependencies
      - <<: *save_backend_cache
      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      - run:
          name: run tests
          command: |
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            bundle exec rspec --format progress $TEST_FILES

  # for frontend
  lint_frontend:
    docker:
      - <<: *frontend_docker_env
    steps:
      - checkout
      - <<: *restore_frontend_cache
      - <<: *install_frontend_dependencies
      - <<: *save_frontend_cache
      - run:
          working_directory: "frontend"
          command: yarn lint

  test_frontend:
    docker:
      - <<: *frontend_docker_env
    steps:
      - checkout
      - <<: *restore_frontend_cache
      - <<: *install_frontend_dependencies
      - <<: *save_frontend_cache
      - run:
          working_directory: "frontend"
          command: yarn test --coverage

  build_frontend:
    docker:
      - <<: *frontend_docker_env
    steps:
      - checkout
      - <<: *restore_frontend_cache
      - <<: *install_frontend_dependencies
      - <<: *save_frontend_cache
      - run:
          working_directory: "frontend"
          command: yarn build

workflows:
  version: 2
  backend:
    jobs:
      - lint_backend:
          filters:
            branches:
              ignore:
                - master
      - build_backend
